<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.szce.im.dao.mapper.ImElectronicfencedataMapper">
  <resultMap id="BaseResultMap" type="com.szce.im.dao.model.ImElectronicfencedata">
    <id column="ElectronicFenceID" jdbcType="VARCHAR" property="electronicfenceid" />
    <result column="ElectronicFenceName" jdbcType="VARCHAR" property="electronicfencename" />
    <result column="location" jdbcType="VARCHAR" property="location" />
    <result column="area" jdbcType="INTEGER" property="area" />
    <result column="StandardParkingNumber" jdbcType="INTEGER" property="standardparkingnumber" />
    <result column="coordinate" jdbcType="VARCHAR" property="coordinate" />
    <result column="ElectronicFenceClassificationID" jdbcType="VARCHAR" property="electronicfenceclassificationid" />
    <result column="CreateTime" jdbcType="TIMESTAMP" property="createtime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ElectronicFenceID, ElectronicFenceName, location, area, StandardParkingNumber, coordinate, 
    ElectronicFenceClassificationID, CreateTime
  </sql>
  <select id="selectByExample" parameterType="com.szce.im.dao.model.ImElectronicfencedataExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from im_electronicfencedata
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from im_electronicfencedata
    where ElectronicFenceID = #{electronicfenceid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from im_electronicfencedata
    where ElectronicFenceID = #{electronicfenceid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.szce.im.dao.model.ImElectronicfencedataExample">
    delete from im_electronicfencedata
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.szce.im.dao.model.ImElectronicfencedata">
    insert into im_electronicfencedata (ElectronicFenceID, ElectronicFenceName, 
      location, area, StandardParkingNumber, 
      coordinate, ElectronicFenceClassificationID, 
      CreateTime)
    values (#{electronicfenceid,jdbcType=VARCHAR}, #{electronicfencename,jdbcType=VARCHAR}, 
      #{location,jdbcType=VARCHAR}, #{area,jdbcType=INTEGER}, #{standardparkingnumber,jdbcType=INTEGER}, 
      #{coordinate,jdbcType=VARCHAR}, #{electronicfenceclassificationid,jdbcType=VARCHAR}, 
      #{createtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.szce.im.dao.model.ImElectronicfencedata">
    insert into im_electronicfencedata
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="electronicfenceid != null">
        ElectronicFenceID,
      </if>
      <if test="electronicfencename != null">
        ElectronicFenceName,
      </if>
      <if test="location != null">
        location,
      </if>
      <if test="area != null">
        area,
      </if>
      <if test="standardparkingnumber != null">
        StandardParkingNumber,
      </if>
      <if test="coordinate != null">
        coordinate,
      </if>
      <if test="electronicfenceclassificationid != null">
        ElectronicFenceClassificationID,
      </if>
      <if test="createtime != null">
        CreateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="electronicfenceid != null">
        #{electronicfenceid,jdbcType=VARCHAR},
      </if>
      <if test="electronicfencename != null">
        #{electronicfencename,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        #{location,jdbcType=VARCHAR},
      </if>
      <if test="area != null">
        #{area,jdbcType=INTEGER},
      </if>
      <if test="standardparkingnumber != null">
        #{standardparkingnumber,jdbcType=INTEGER},
      </if>
      <if test="coordinate != null">
        #{coordinate,jdbcType=VARCHAR},
      </if>
      <if test="electronicfenceclassificationid != null">
        #{electronicfenceclassificationid,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.szce.im.dao.model.ImElectronicfencedataExample" resultType="java.lang.Long">
    select count(*) from im_electronicfencedata
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update im_electronicfencedata
    <set>
      <if test="record.electronicfenceid != null">
        ElectronicFenceID = #{record.electronicfenceid,jdbcType=VARCHAR},
      </if>
      <if test="record.electronicfencename != null">
        ElectronicFenceName = #{record.electronicfencename,jdbcType=VARCHAR},
      </if>
      <if test="record.location != null">
        location = #{record.location,jdbcType=VARCHAR},
      </if>
      <if test="record.area != null">
        area = #{record.area,jdbcType=INTEGER},
      </if>
      <if test="record.standardparkingnumber != null">
        StandardParkingNumber = #{record.standardparkingnumber,jdbcType=INTEGER},
      </if>
      <if test="record.coordinate != null">
        coordinate = #{record.coordinate,jdbcType=VARCHAR},
      </if>
      <if test="record.electronicfenceclassificationid != null">
        ElectronicFenceClassificationID = #{record.electronicfenceclassificationid,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null">
        CreateTime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update im_electronicfencedata
    set ElectronicFenceID = #{record.electronicfenceid,jdbcType=VARCHAR},
      ElectronicFenceName = #{record.electronicfencename,jdbcType=VARCHAR},
      location = #{record.location,jdbcType=VARCHAR},
      area = #{record.area,jdbcType=INTEGER},
      StandardParkingNumber = #{record.standardparkingnumber,jdbcType=INTEGER},
      coordinate = #{record.coordinate,jdbcType=VARCHAR},
      ElectronicFenceClassificationID = #{record.electronicfenceclassificationid,jdbcType=VARCHAR},
      CreateTime = #{record.createtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.szce.im.dao.model.ImElectronicfencedata">
    update im_electronicfencedata
    <set>
      <if test="electronicfencename != null">
        ElectronicFenceName = #{electronicfencename,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        location = #{location,jdbcType=VARCHAR},
      </if>
      <if test="area != null">
        area = #{area,jdbcType=INTEGER},
      </if>
      <if test="standardparkingnumber != null">
        StandardParkingNumber = #{standardparkingnumber,jdbcType=INTEGER},
      </if>
      <if test="coordinate != null">
        coordinate = #{coordinate,jdbcType=VARCHAR},
      </if>
      <if test="electronicfenceclassificationid != null">
        ElectronicFenceClassificationID = #{electronicfenceclassificationid,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        CreateTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ElectronicFenceID = #{electronicfenceid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.szce.im.dao.model.ImElectronicfencedata">
    update im_electronicfencedata
    set ElectronicFenceName = #{electronicfencename,jdbcType=VARCHAR},
      location = #{location,jdbcType=VARCHAR},
      area = #{area,jdbcType=INTEGER},
      StandardParkingNumber = #{standardparkingnumber,jdbcType=INTEGER},
      coordinate = #{coordinate,jdbcType=VARCHAR},
      ElectronicFenceClassificationID = #{electronicfenceclassificationid,jdbcType=VARCHAR},
      CreateTime = #{createtime,jdbcType=TIMESTAMP}
    where ElectronicFenceID = #{electronicfenceid,jdbcType=VARCHAR}
  </update>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />

  <resultMap type="com.szce.im.dao.model.custom.ImElectronicfencedataCustom" id="fenceDataCustomResultMap">
    <id column="ElectronicFenceID" property="electronicfenceid" />
    <result column="ElectronicFenceName" property="electronicfencename" />
    <result column="location" property="location" />
    <result column="area" property="area" />
    <result column="StandardParkingNumber" property="standardparkingnumber" />
    <result column="coordinate" property="coordinate" />
    <result column="ElectronicFenceClassificationID" property="electronicfenceclassificationid" />

    <association property="imElectronicfenceclassification" javaType="com.szce.im.dao.model.ImElectronicfenceclassification">
      <id column="claID" property="electronicfenceclassificationid" />
      <result column="claName" property="electronicfenceclassificationname" />
    </association>

  </resultMap>


  <select id="getPage" resultMap="fenceDataCustomResultMap">
    select fence.*, cla.ElectronicFenceClassificationID claID, cla.ElectronicFenceClassificationName claName
    from im_electronicfencedata fence LEFT OUTER JOIN im_electronicfenceclassification cla
    ON fence.ElectronicFenceClassificationID = cla.ElectronicFenceClassificationID
    <include refid="query_fenceData_sql"></include>
    order by fence.CreateTime desc
    limit #{cond.offset}, #{cond.limit}
  </select>

  <sql id="query_fenceData_sql" >
    <if test="search!=null and search!=''">
      WHERE (fence.ElectronicFenceName like '%${search}%'  or  fence.ElectronicFenceID like '%${search}%'  or cla.ElectronicFenceClassificationName like '%${search}%' )
    </if>
  </sql>

  <select id="getCount" resultType="long">
    select count(fence.ElectronicFenceID)
    from im_electronicfencedata fence LEFT OUTER JOIN im_electronicfenceclassification cla
    ON fence.ElectronicFenceClassificationID = cla.ElectronicFenceClassificationID
    <include refid="query_fenceData_sql"></include>
  </select>

</mapper>